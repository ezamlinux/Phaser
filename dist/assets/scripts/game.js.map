{
  "version": 3,
  "sources": [
    "node_modules/browser-pack/_prelude.js",
    "src/index.js",
    "src/objects/Barrel.js",
    "src/objects/Bottle.js",
    "src/objects/BottleCrate.js",
    "src/objects/Coin.js",
    "src/objects/CoinCrate.js",
    "src/objects/Crate.js",
    "src/objects/GameGen.js",
    "src/objects/Player.js",
    "src/objects/RegularCrate.js",
    "src/states/EndlessRunner.js",
    "src/states/Menu.js"
  ],
  "names": [],
  "mappings": "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",
  "file": "generated.js",
  "sourceRoot": "",
  "sourcesContent": [
    "(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()",
    "import Menu from 'states/Menu';\r\nimport EndlessRunner from 'states/EndlessRunner';\r\n\r\nclass Game extends Phaser.Game {\r\n    constructor () {\r\n        super(800, 600, Phaser.AUTO, 'content', null);\r\n        this.GLOBAL = {};\r\n        this.state.add('menu', Menu, false);\r\n        this.state.add('endlessRunner', EndlessRunner, false);\r\n        this.state.start('menu');\r\n    }\r\n}\r\n\r\nnew Game();\r\n",
    "class Barrel extends Phaser.Sprite {\r\n    constructor (game, x, y) {\r\n        super(game, x, y, 'rolling_barrel');\r\n\r\n        this.game.physics.arcade.enable(this);\r\n        this.body.bounce.set(Math.random());\r\n        this.body.gravity.y = 200;\r\n        this.anchor.setTo(.5);\r\n        this.body.velocity.x = -200;\r\n        this.checkWorldBounds = true;\r\n        this.outOfBoundsKill = true;\r\n        this.body.onCollide = new Phaser.Signal();\r\n        this.body.onCollide.add(this.onHit, this);\r\n        this.game.GLOBAL.barrels.add(this);\r\n    }\r\n\r\n    onHit (_barrel, _player) {\r\n        if (_player && _player.key == 'samourai' && ! (_player.body.touching.down && _barrel.body.touching.up)) {\r\n            _player.getDamage(1);\r\n            _barrel.kill();\r\n        }\r\n    }\r\n}\r\n\r\nexport default Barrel;",
    "class Bottle extends Phaser.Sprite {\r\n    constructor (game, x, y, index) {\r\n        super(game, x, y, 'flasks');\r\n        this.game.physics.arcade.enable(this);\r\n        this.frame = index;\r\n        this.body.velocity.x = -200;\r\n        this.body.gravity.y = 1000;\r\n        this.body.bounce.setTo(.5);\r\n        this.checkWorldBounds = true;\r\n        this.outOfBoundsKill = true;\r\n\r\n        this.game.GLOBAL.bottles.add(this);\r\n    }\r\n\r\n    onHit () {\r\n        this.kill();\r\n    }\r\n}\r\n\r\nexport default Bottle;",
    "import Crate from './Crate';\r\nimport Bottle from './Bottle';\r\n\r\nclass BottleCrate extends Crate {\r\n    constructor (game, x, y) {\r\n        let group = game.GLOBAL.bottleCrates;\r\n        super(game, x, y, group, 1);\r\n\r\n        this.body.onCollide = new Phaser.Signal();\r\n        this.body.onCollide.add(this.onHit, this);\r\n    }\r\n\r\n    onHit (_crate, _player) {\r\n        if (_player.key == 'samourai' && ! (_player.body.touching.down && _crate.body.touching.up)) {\r\n            // random bottle color\r\n            let rand = Math.floor(Math.random() * 4);\r\n\r\n            new Bottle(this.game, _crate.x, _crate.y, rand);\r\n\r\n            _crate.kill(_crate, _player)\r\n        }\r\n    }\r\n}\r\n\r\nexport default BottleCrate;",
    "class Coin extends Phaser.Sprite {\r\n    constructor (game, x, y) {\r\n        super(game, x, y, 'ring');\r\n        this.game.physics.arcade.enable(this);\r\n        this.coinSound = this.game.add.audio('coin');\r\n        this.coinSound.play();\r\n        this.body.velocity.x = -200;\r\n        this.body.gravity.y = 1000;\r\n        this.body.bounce.setTo(.5);\r\n        this.checkWorldBounds = true;\r\n        this.outOfBoundsKill = true;\r\n\r\n        this.game.GLOBAL.coins.add(this);\r\n    }\r\n\r\n    onHit () {\r\n        this.coinSound.play();\r\n        this.kill();\r\n    }\r\n}\r\n\r\nexport default Coin;",
    "import Crate from 'objects/Crate';\r\nimport Coin from 'objects/Coin';\r\n\r\nclass CoinCrate extends Crate {\r\n    constructor (game, x, y) {\r\n        let group = game.GLOBAL.coinCrates;\r\n        super(game, x, y, group, 2);\r\n\r\n        this.body.onCollide = new Phaser.Signal();\r\n        this.body.onCollide.add(this.onHit, this);\r\n    }\r\n\r\n    onHit (_crate, _player) {\r\n        if (_player.key == 'samourai' && ! (_player.body.touching.down && _crate.body.touching.up)) {\r\n            let rand = Math.floor(Math.random() * 5) + 1;\r\n            for (let i = 0; i < rand; i++) {\r\n                new Coin(this.game, _crate.x + 80 + (20 * i), _crate.y);\r\n            }\r\n            super.onHit(_crate, _player);\r\n        }\r\n    }\r\n}\r\n\r\nexport default CoinCrate",
    "class Crate extends Phaser.Sprite {\r\n    constructor (game, x, y, group, _frame) {\r\n        super(game, x, y, 'crates');\r\n\r\n        this.game.physics.arcade.enable(this);\r\n        this.frame = _frame;\r\n        this.body.velocity.x = -200;\r\n        this.checkWorldBounds = true;\r\n        this.outOfBoundsKill = true;\r\n        this.body.onCollide = new Phaser.Signal();\r\n        this.body.onCollide.add(this.onHit, this);\r\n        group.add(this);\r\n    }\r\n\r\n    onHit (_crate, _player) {\r\n        if (_player && _player.key == 'samourai' && ! (_player.body.touching.down && _crate.body.touching.up)) {\r\n            _crate.kill();\r\n        }\r\n    }\r\n}\r\n\r\nexport default Crate;",
    "import RegularCrate from './RegularCrate';\r\nimport BottleCrate from './BottleCrate';\r\nimport CoinCrate from './CoinCrate';\r\nimport Barrel from './Barrel';\r\n\r\nclass GameGen {\r\n    constructor (_game) {\r\n        // 1 = Regular Crate , 2 = Barrels, 3 = CoinCrate\r\n        this.patterns = [\r\n            [1, 1, 1, 1, 1],\r\n            [2, 2, 2, 2, 2],\r\n            [3, 3, 3, 3, 3],\r\n            [1, 2, 1, 2, 1]\r\n        ]\r\n        this.currentPattern;\r\n        this.index = 0;\r\n        this.game = _game;\r\n        this.posY = this.game.height - 128;\r\n    }\r\n\r\n    generateObstacle () {\r\n        if (!this.currentPattern) {\r\n            this.currentPattern = this.rand(this.patterns.length) - 1;\r\n        }\r\n        this.followPattern();\r\n    }\r\n\r\n    followPattern () {\r\n        let index = this.patterns[this.currentPattern][this.index];\r\n        switch (index) {\r\n            case 1:\r\n                this.addCrate();\r\n                break;\r\n            case 2:\r\n                this.addBarrels();\r\n                break;\r\n            case 3:\r\n                this.addCrate();\r\n                break;\r\n        }\r\n        if (this.patterns[this.currentPattern][this.index + 1] == undefined) {\r\n            this.currentPattern = this.rand(this.patterns.length) - 1;\r\n            this.index = 0;\r\n        }\r\n        else {\r\n            this.index +=1;\r\n        }\r\n    }\r\n\r\n    rand (_x) {\r\n        return Math.floor(Math.random()* _x) + 1;\r\n    }\r\n\r\n    addBarrels () {\r\n        let rand = this.rand(128);\r\n        new Barrel(this.game, this.game.width, this.posY - rand)\r\n    }\r\n\r\n    addCrate () {\r\n        let rand = this.rand(10);\r\n        let value =this.rand(10) > 5 ? 96 : 0\r\n        if (rand >= 9) {\r\n            if (this.rand(10) >= 5) {\r\n                new CoinCrate(this.game, this.game.width, this.posY - value);\r\n            }\r\n            else {\r\n                new BottleCrate(this.game, this.game.width, this.posY - value);\r\n            }\r\n        } else {\r\n            new RegularCrate(this.game, this.game.width, this.posY);\r\n        }\r\n    }\r\n}\r\n\r\nexport default GameGen;",
    "class Player extends Phaser.Sprite {\r\n    constructor (game) {\r\n        super(game, 32, game.world.height - 200, 'samourai');\r\n\r\n        this.game.physics.arcade.enable(this);\r\n        this.jumpSound = this.game.add.audio('jump');\r\n        this.maxLife = 3;\r\n        this.life = this.maxLife;\r\n        this.coins = 0;\r\n        this.score = 0;\r\n        this.bottleStock = {\r\n            blue : 0,\r\n            green : 0,\r\n            yellow : 0,\r\n            red : 0,\r\n            max : 3\r\n        };\r\n        this.inputEnabled = true;\r\n        this.scale.setTo(0.2);\r\n        this.body.setSize(330, 465, 250, 40);\r\n        this.body.collideWorldBounds = true;\r\n        this.body.gravity.y = 1200;\r\n\r\n        // -- Animation -- //\r\n        this.animations.add('run', Phaser.Animation.generateFrameNames('Run_', 0, 7, '', 3), 30, false);\r\n        this.animations.add('forward', Phaser.Animation.generateFrameNames('Run_', 0, 7, '', 3).reverse(), 30, false);\r\n        this.animations.add('jump', ['JumpUP'], 15, false);\r\n        this.animations.add('fall', ['FallDown'], 15, false);\r\n        this.game.world.addChild(this);\r\n    }\r\n\r\n    jump () {\r\n        if (this.body.blocked.down || this.body.touching.down) {\r\n            this.jumpSound.play();\r\n            this.animations.play('jump');\r\n            this.body.velocity.y = -500;\r\n        }\r\n    }\r\n\r\n    getDamage (_x) {\r\n        this.life -= _x;\r\n        if (this.life == 0) {\r\n            this.game.GLOBAL.themeMusic.stop();\r\n            this.game.state.start('menu');\r\n        }\r\n    }\r\n\r\n    useBottle (_bottle) {\r\n        if (_bottle.keyCode == 49) {\r\n            if (this.player.bottleStock.green == this.player.bottleStock.max && this.player.life < this.player.maxLife) {\r\n                this.player.life += 1 ;\r\n                this.player.bottleStock.green = 0;\r\n            }\r\n        }\r\n\r\n        else if (_bottle.keyCode == 50) {\r\n            if (this.player.bottleStock.red == this.player.bottleStock.max && this.player.life < this.player.maxLife) {\r\n                this.player.life = this.player.maxLife;\r\n                this.player.bottleStock.red = 0;\r\n            }\r\n        }\r\n\r\n        else if (_bottle.keyCode == 51) {\r\n            if (this.player.bottleStock.yellow == this.player.bottleStock.max) {\r\n                this.player.maxLife += 1;\r\n                this.arrayLife[this.arrayLife.length] = this.game.add.sprite(16 + (this.arrayLife.length * 24), 16, 'lifeBar');\r\n                this.player.life = this.player.maxLife;\r\n                this.player.bottleStock.yellow = 0;\r\n            }\r\n        }\r\n    }\r\n\r\n    hitBottle (_player, _bottle) {\r\n        switch (_bottle.frame) {\r\n            case 0:\r\n                if (_player.bottleStock.blue < _player.bottleStock.max) {\r\n                    _player.bottleStock.blue += 1;\r\n                    if (_player.bottleStock.blue == _player.bottleStock.max) {\r\n                        this.scoreMultiplicateur += 1;\r\n                        _player.bottleStock.blue = 0;\r\n                    }\r\n                }\r\n                break;\r\n            case 1:\r\n                if (_player.bottleStock.green < _player.bottleStock.max) {\r\n                    _player.bottleStock.green += 1;\r\n                }\r\n                break;\r\n            case 2:\r\n                if (_player.bottleStock.red < _player.bottleStock.max) {\r\n                    _player.bottleStock.red += 1;\r\n                }\r\n                break;\r\n            case 3:\r\n                if (_player.bottleStock.yellow < _player.bottleStock.max) {\r\n                    _player.bottleStock.yellow += 1;\r\n                }\r\n                break;\r\n\r\n        }\r\n        _bottle.onHit();\r\n    }\r\n\r\n    hitCoin (_player, _coin) {\r\n        _coin.onHit();\r\n        _player.coins += 1;\r\n    }\r\n\r\n    hitKatana (_player, _katana) {\r\n        _player.coins += _katana.coins;\r\n        ioClient.playerHitKatana(_katana);\r\n        _katana.onHit();\r\n    }\r\n}\r\n\r\nexport default Player;",
    "import Crate from 'objects/Crate'\r\n\r\nclass RegularCrate extends Crate {\r\n    constructor (game, x, y) {\r\n        let group = game.GLOBAL.crates;\r\n        super(game, x, y, group, 0);\r\n        this.body.onCollide = new Phaser.Signal();\r\n        this.body.onCollide.add(this.onHit, this);\r\n    }\r\n\r\n    onHit (_crate, _player) {\r\n        if (_player.key == 'samourai' && ! (_player.body.touching.down && _crate.body.touching.up)) {\r\n            _player.getDamage(1);\r\n\r\n            super.onHit(_crate, _player);\r\n        }\r\n    }\r\n}\r\n\r\nexport default RegularCrate;",
    "import Player from 'objects/Player';\r\nimport GameGen from 'objects/GameGen';\r\n\r\nclass EndlessRunner extends Phaser.State {\r\n    preload () {\r\n        this.load.path = 'assets/';\r\n        this.game.load.atlas('samourai', 'img/player.png', 'data/player.json');\r\n        this.game.load.image('sky', 'img/sky.png');\r\n        this.game.load.image('mountain', 'img/mountain.png');\r\n        this.game.load.image('rolling_barrel', 'img/rolling_barrel.png');\r\n        this.game.load.image('katana', 'img/brokenKatana.png');\r\n        this.game.load.spritesheet('flasks', 'img/Flasks.png', 24, 24);\r\n        this.game.load.spritesheet('crates', 'img/Crates.png', 64, 64);\r\n        this.game.load.image('ring', 'img/ring.png');\r\n        this.game.load.image('grass', 'img/grass.png');\r\n        this.game.load.spritesheet('lifeBar', 'img/lifeBar.png', 16, 32);\r\n        this.game.load.spritesheet('green_jar', 'img/green_jar.png', 32, 32);\r\n        this.game.load.spritesheet('red_jar', 'img/red_jar.png', 32, 32);\r\n        this.game.load.spritesheet('yellow_jar', 'img/yellow_jar.png', 32, 32);\r\n        this.game.load.spritesheet('blue_jar', 'img/blue_jar.png', 32, 32);\r\n        this.game.load.audio('taiko', 'audio/taiko-drums.ogg');\r\n        this.game.load.audio('jump', 'audio/jump.wav');\r\n        this.game.load.audio('coin', 'audio/coin.wav');\r\n    }\r\n\r\n    create () {\r\n        // ---- global params ---- //\r\n        this.scoreMultiplicateur = 1;\r\n        // ---- ----//\r\n        this.game.physics.startSystem(Phaser.Physics.ARCADE);\r\n        this.cursors = this.game.input.keyboard.createCursorKeys();\r\n\r\n        this.game.GLOBAL.themeMusic = this.game.add.audio('taiko');\r\n        this.game.GLOBAL.themeMusic.loop = true;\r\n        this.game.GLOBAL.themeMusic.play();\r\n\r\n        this.game.stage.backgroundColor ='#000000';\r\n        this.bg_sky = this.game.add.tileSprite(0, 0, this.game.world.width, this.game.world.height, 'sky');\r\n        this.bg_mountain= this.game.add.tileSprite(0, 0, this.game.world.width, this.game.world.height, 'mountain')\r\n        this.floors = this.game.add.tileSprite(0, this.game.world.height - 64, this.game.world.width, 64, 'grass');\r\n        this.game.physics.arcade.enable(this.floors);\r\n        this.floors.enableBody = true;\r\n        this.floors.body.immovable = true;\r\n\r\n        this.scoreText = this.game.add.text(this.game.world.width / 2, 16, this.score, { fontSize: '32px', fill: '#000' });\r\n        this.scoreText.anchor.setTo(.5, 0);\r\n\r\n        this.blue_jar = this.game.add.sprite(this.game.world.width - 192, 16, 'blue_jar');\r\n        this.green_jar = this.game.add.sprite(this.game.world.width - 144, 16, 'green_jar');\r\n        this.red_jar = this.game.add.sprite(this.game.world.width - 96, 16, 'red_jar');\r\n        this.yellow_jar = this.game.add.sprite(this.game.world.width - 48, 16, 'yellow_jar');\r\n\r\n        // -- GROUPS --\r\n        // -- crates\r\n        this.game.GLOBAL.crates = this.game.add.group();\r\n        this.game.GLOBAL.coinCrates = this.game.add.group();\r\n        this.game.GLOBAL.bottleCrates = this.game.add.group();\r\n\r\n        // -- barrels\r\n        this.game.GLOBAL.barrels = this.game.add.group();\r\n\r\n        // -- coins\r\n        this.game.GLOBAL.coins = this.game.add.group();\r\n\r\n        // -- bottles\r\n        this.game.GLOBAL.bottles = this.game.add.group();\r\n\r\n        // -- Katana\r\n        this.game.GLOBAL.katana = this.game.add.group();\r\n\r\n        // -- function -- //\r\n        this.player = new Player(this.game);\r\n        this.gameGen = new GameGen(this.game);\r\n        this.arrayLife = [];\r\n\r\n        for (let i = 0; i < this.player.maxLife; i++) {\r\n            this.arrayLife[i] = this.game.add.sprite(16 + (i * 24), 16, 'lifeBar');\r\n        }\r\n\r\n        this.coinsText = this.game.add.text(16, 48, this.player.coins, { fontSize: '32px', fill: '#FCFA22' });\r\n\r\n        // ---- EVENTS ---- //\r\n        var spaceKey = this.game.input.keyboard.addKey(Phaser.Keyboard.SPACEBAR);\r\n        spaceKey.onDown.add(this.player.jump, this.player);\r\n        var key4 = this.game.input.keyboard.addKey(Phaser.Keyboard.UP);\r\n        key4.onDown.add(this.player.jump, this.player);\r\n\r\n        var key1 = this.game.input.keyboard.addKey(Phaser.Keyboard.ONE);\r\n        key1.onDown.add(this.player.useBottle, this);\r\n\r\n        var key2 = this.game.input.keyboard.addKey(Phaser.Keyboard.TWO);\r\n        key2.onDown.add(this.player.useBottle, this);\r\n\r\n        var key3 = this.game.input.keyboard.addKey(Phaser.Keyboard.THREE);\r\n        key3.onDown.add(this.player.useBottle, this);\r\n\r\n        this.timer = this.game.time.events.loop(2000, () => {\r\n            this.player.score += 1;\r\n            this.gameGen.generateObstacle();\r\n        }, this.gameGen);\r\n    }\r\n\r\n    update () {\r\n        this.updateHUD();\r\n        // -- floor collide\r\n        this.game.physics.arcade.collide(this.floors, this.player);\r\n        this.game.physics.arcade.collide(this.floors, this.game.GLOBAL.coins);\r\n        this.game.physics.arcade.collide(this.floors, this.game.GLOBAL.bottles);\r\n        this.game.physics.arcade.collide(this.floors, this.game.GLOBAL.crates);\r\n        this.game.physics.arcade.collide(this.floors, this.game.GLOBAL.coinCrates);\r\n        this.game.physics.arcade.collide(this.floors, this.game.GLOBAL.bottleCrates);\r\n        this.game.physics.arcade.collide(this.floors, this.game.GLOBAL.barrels);\r\n        this.game.physics.arcade.collide(this.floors, this.game.GLOBAL.katana);\r\n\r\n        // -- barrels collide\r\n        this.game.physics.arcade.collide(this.game.GLOBAL.barrels, this.game.GLOBAL.crates, this.breakBoth, null, this);\r\n        this.game.physics.arcade.collide(this.game.GLOBAL.barrels, this.game.GLOBAL.coinCrates, this.breakBoth, null, this);\r\n        this.game.physics.arcade.collide(this.game.GLOBAL.barrels, this.game.GLOBAL.bottleCrates, this.breakBoth, null, this);\r\n        this.game.physics.arcade.collide(this.game.GLOBAL.barrels, this.game.GLOBAL.barrels, this.breakBoth, null, this);\r\n\r\n        // -- player collide\r\n        this.game.physics.arcade.collide(this.player, this.game.GLOBAL.crates, this.game.GLOBAL.crates.onHit, null, this);\r\n        this.game.physics.arcade.collide(this.player, this.game.GLOBAL.bottleCrates, this.game.GLOBAL.bottleCrates.onHit, null, this);\r\n        this.game.physics.arcade.collide(this.player, this.game.GLOBAL.coinCrates, this.game.GLOBAL.coinCrates.onHit, null, this);\r\n        this.game.physics.arcade.collide(this.player, this.game.GLOBAL.barrels, this.game.GLOBAL.barrels.onHit, null, this);\r\n        this.game.physics.arcade.overlap(this.player, this.game.GLOBAL.katana, this.player.hitKatana, null, this);\r\n        this.game.physics.arcade.overlap(this.player, this.game.GLOBAL.coins, this.player.hitCoin, null, this);\r\n        this.game.physics.arcade.overlap(this.player, this.game.GLOBAL.bottles, this.player.hitBottle, null, this);\r\n\r\n        // -- animation\r\n        this.bg_sky.tilePosition.x -= 0.20;\r\n        this.bg_mountain.tilePosition.x -= 1;\r\n        this.floors.tilePosition.x -= 2.5;\r\n        this.game.GLOBAL.barrels.forEach(item => item.angle -= 1);\r\n\r\n\r\n        // -- player event\r\n        if (this.cursors.right.isDown) {\r\n            if (this.player.body.touching.down) {\r\n                this.player.animations.play('run');\r\n                this.player.body.velocity.x = 200;\r\n            }\r\n            else {\r\n                this.player.body.velocity.x = 150;\r\n            }\r\n        }\r\n        else if (this.cursors.left.isDown) {\r\n            if (this.player.body.touching.down) {\r\n                this.player.animations.play('forward');\r\n                this.player.body.velocity.x = -150;\r\n            }\r\n            else {\r\n                this.player.body.velocity.x = -120;\r\n            }\r\n        }\r\n        else if (this.player.body.touching.down) {\r\n            this.player.animations.play('run');\r\n            this.player.body.velocity.x = 0;\r\n        }\r\n    }\r\n    // ------------------ //\r\n    // ---- Function ---- //\r\n    // ------------------ //\r\n\r\n    // -- generator & miscellanous\r\n\r\n    createFloor () {\r\n        for (let i = 0; i < this.game.world.width; i += 64) {\r\n            this.floors.create(i, this.game.world.height - 64, 'grass');\r\n        }\r\n    }\r\n\r\n    updateHUD () {\r\n        this.scoreText.text = this.player.score;\r\n        this.coinsText.text = this.player.coins;\r\n        for (let i = 0; i < this.arrayLife.length; i++) {\r\n            this.arrayLife[i].frame = i + 1 <= this.player.life ? 0 : 1;\r\n        }\r\n        this.green_jar.frame = this.player.bottleStock.green\r\n        this.red_jar.frame = this.player.bottleStock.red\r\n        this.blue_jar.frame = this.player.bottleStock.blue\r\n        this.yellow_jar.frame = this.player.bottleStock.yellow\r\n    }\r\n\r\n    // -- HITTER\r\n    breakBoth (_one, _two) {\r\n        _one.kill();\r\n        _two.kill();\r\n    }\r\n}\r\n\r\nexport default EndlessRunner;\r\n",
    "class Menu extends Phaser.State {\r\n    preload () {\r\n        this.load.path = 'assets/';\r\n        this.game.load.image('sky', 'img/sky.png');\r\n        this.game.load.image('mountain', 'img/mountain.png');\r\n        this.game.load.image('runnerButton', 'img/menu/runnerButton.png');\r\n        this.game.load.audio('rain', 'audio/rain.wav');\r\n    }\r\n\r\n    create () {\r\n        this.bg_sky = this.game.add.tileSprite(0, 0, this.game.world.width, this.game.world.height, 'sky');\r\n        this.bg_mountain= this.game.add.tileSprite(0, 0, this.game.world.width, this.game.world.height, 'mountain')\r\n\r\n        var button = this.game.add.button(this.game.world.centerX, this.game.world.centerY, 'runnerButton', this.launchEndlessRunner, this);\r\n        button.anchor.setTo(.5);\r\n\r\n        var rKey = this.game.input.keyboard.addKey(Phaser.Keyboard.R);\r\n        rKey.onDown.addOnce(this.launchEndlessRunner, this);\r\n\r\n\r\n        this.game.GLOBAL.themeMusic = this.game.add.audio('rain');\r\n        this.game.GLOBAL.themeMusic.loop = true;\r\n        this.game.GLOBAL.themeMusic.volume = 0.2;\r\n        this.game.GLOBAL.themeMusic.play();\r\n    }\r\n\r\n    update () {\r\n        this.bg_sky.tilePosition.x -= 0.20;\r\n        this.bg_mountain.tilePosition.x -= 1;\r\n    }\r\n\r\n    launchEndlessRunner () {\r\n        this.game.GLOBAL.themeMusic.stop();\r\n        this.game.state.start('endlessRunner');\r\n    }\r\n}\r\n\r\nexport default Menu;"
  ]
}